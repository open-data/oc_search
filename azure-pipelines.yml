# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: UsePythonVersion@0
  displayName: 'Using Python 3.6'
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'


- script: |
    cp oc_search/settings-sample.py oc_search/settings.py
  displayName: 'Copy test settings file'


- script: |
    pushd '$(projectRoot)'
    python manage.py test search.tests --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Basic Python 3.6 Test Run'
  condition: succeededOrFailed()

# Do not package the temp settings file
- script: |
    rm oc_search/oc_search/settings.py
  displayName: 'Copy test settings file'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/Staging' 
    includeRootFolder: true
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/OfflinePackage/OC_Search_DeploymentPackage.tar.gz' 
    replaceExistingArchive: true 
  displayName: 'Create OfflinePackage (tarball)'
    
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'OfflinePackage'
    targetPath: '$(Build.ArtifactStagingDirectory)/OfflinePackage'
  displayName: 'Upload OfflinePackage to Artifacts'


