from distutils.dir_util import copy_tree
from search.models import Search, Field, Code, ChronologicCode
from django.core.management.base import BaseCommand, CommandError
import json
import logging
from os import path, mkdir
from pathlib import Path
from shutil import copyfile


class Command(BaseCommand):
    help = 'Import a OCSS search defintion that was generated by the export_search command'

    logger = logging.getLogger(__name__)

    def add_arguments(self, parser):
        parser.add_argument('--import_dir', type=str, help='Directory to write export files to', required=True)
        parser.add_argument('--search', type=str, help='A unique code identifier for the Search', required=True)
        parser.add_argument('--include_db', required=False, action='store_true',
                            help='Update the database from JSON exported by the the export_search_definition command. Not recommended when using more than one search.')
        parser.add_argument('--db_only', required=False, action='store_true',
                            help="Only import database definitions.")

    def handle(self, *args, **options):

        if not path.exists(options['import_dir']):
            raise CommandError('Import directory not found: ' + options['export_dir'])

        root_path = path.join(options['import_dir'], options['search'])
        if not path.exists(root_path):
            raise CommandError('Import search directory not found: ' + root_path)

        # Examine directory the default directories of an exported search
        db_path = path.join(root_path, 'db')
        if not path.exists(db_path):
            raise CommandError('Import search database definition directory not found: ' + db_path)
        snippet_path = path.join(root_path, 'snippets')
        if not path.exists(snippet_path):
            snippet_path = ''
        plugin_path = path.join(root_path, 'plugins')
        if not path.exists(plugin_path):
            plugin_path = ''
        data_path = path.join(root_path, 'data')
        if not path.exists(data_path):
            data_path = ''
        locale_path = path.join(root_path, 'locale')
        if not path.exists(locale_path):
            locale_path = ''
        cmd_path = path.join(root_path, "commands")
        if not path.exists(cmd_path):
            cmd_path = ''
        model_path = path.join(root_path, "models")
        if not path.exists(model_path):
            model_path = ''
        extras_path = path.join(root_path, "extras")
        if not path.exists(extras_path):
            extras_path = ''
        tests_path = path.join(root_path, 'tests')
        if not path.exists(tests_path):
            tests_path = ""

        # Import Search - skip this if the option '--exclude-db'  was selected on the command line

        if options['include_db']:

            searches_path = path.join(db_path, "{0}_search.json".format(options['search']))
            with open(searches_path, 'r', encoding='utf-8-sig', errors="ignore") as json_file:
                imported_data = json.load(json_file)
                try:
                    new_search, created = Search.objects.get_or_create(search_id=imported_data['search_id'])
                    new_search.from_dict(imported_data)
                    new_search.save()
                    if created:
                        logging.info(f"Imported new Search model {new_search.search_id}")
                    else:
                        logging.info(f"Updated Search model {new_search.search_id}")
                except KeyError as ke:
                    raise CommandError(f"Unable to create search record. Missing field {ke}")

            # Import Fields
            field_count = 0
            fields_path = path.join(db_path, "{0}_fields.json".format(options['search']))
            if path.exists(fields_path):
                with open(fields_path, 'r', encoding='utf-8-sig', errors="ignore") as json_file:
                    imported_data = json.load(json_file)
                    for field_defn in imported_data:
                        try:
                            new_search = Search.objects.get(search_id=field_defn['search_id'])
                            new_field, created = Field.objects.get_or_create(fid=field_defn['fid'], search_id=new_search)
                            new_field.from_dict(field_defn, new_search)
                            new_field.save()
                            if created:
                                logging.info(f"Imported new Field {new_field.field_id} for Search {new_search.search_id}")
                            else:
                                logging.info(f"Updated Field model {new_field.field_id} for Search {new_search.search_id}")
                        except KeyError as ke:
                            raise CommandError(f"Unable to create Field record. Missing field {ke}")
                field_count = len(imported_data)

            # Import Codes - A search may not necessarily have codes
            code_count = 0
            codes_path = path.join(db_path, "{0}_codes.json".format(options['search']))
            if path.exists(codes_path) and path.getsize(codes_path) > 0:
                with open(codes_path, 'r', encoding='utf-8-sig', errors="ignore") as json_file:
                    imported_data = json.load(json_file)
                    for code_defn in imported_data:
                        try:
                            new_field = Field.objects.get(fid=code_defn["field_fid"])
                            new_code, created = Code.objects.get_or_create(cid=code_defn['cid'], field_fid=new_field)
                            new_code.from_dict(code_defn, new_field)
                            new_code.save()
                            if created:
                                logging.info(f"Imported new Code {new_code.code_id} for Field {new_field.fid}")
                            else:
                                logging.info(f"Updated Code model {new_code.code_id} for Field {new_field.fid}")
                        except KeyError as ke:
                            raise CommandError(f"Unable to create Code record. Missing field {ke}")
                    code_count = len(imported_data)
            else:
                logging.info("Skipping missing or empty Codes import data file")

            # Import Chronological Codes - A search may not necessarily have chronologic odes
            chrono_count = 0
            ccodes_path = path.join(db_path, "{0}_chronologiccodes.json".format(options['search']))
            if path.exists(ccodes_path) and path.getsize(ccodes_path) > 0:
                with open(ccodes_path, 'r', encoding='utf-8-sig', errors="ignore") as json_file:
                    imported_data = json.load(json_file)
                    for ccode_defn in imported_data:
                        try:
                            new_code = Code.objects.get(cid=ccode_defn["code_cid"])
                            new_ccode, created = ChronologicCode.objects.get_or_create(ccid=ccode_defn['ccid'], code_cid=new_code)
                            new_ccode.from_dict(ccode_defn, new_code)
                            new_ccode.save()
                            if created:
                                logging.info(f"Imported new Chrono Code {new_ccode.label}, {new_ccode.start_date.date()} for Code {new_code.code_id}")
                            else:
                                logging.info(f"Updated Chrono Code model {new_ccode.label}, {new_ccode.start_date.date()} for Code {new_code.code_id}")
                        except KeyError as ke:
                            raise CommandError(f"Unable to create Code record. Missing field {ke}")
                    chrono_count = len(imported_data)
            else:
                logging.info("Skipping missing or empty Chronological Codes import data file")

            logging.info(f"Imported Search {options['search']} with {field_count} fields, {code_count} codes and {chrono_count} chrono-codes")

        if not options["db_only"]:
            # Copy custom snippets. The convention is for templates to be deployed to : BASE_DIr/templates/snippets/<search ID>/
            BASE_DIR = Path(__file__).resolve().parent.parent.parent
            custom_template_dir = path.join(BASE_DIR, 'templates', 'snippets', 'custom', options['search'])
            if path.exists(snippet_path):
                if not path.exists(path.join(BASE_DIR, 'templates', 'snippets', 'custom')):
                    mkdir(path.join(BASE_DIR, 'templates', 'snippets', 'custom'))
                if not path.exists(custom_template_dir):
                    mkdir(custom_template_dir)
                copy_tree(snippet_path, custom_template_dir)
                logging.info("Copying custom snippets to {0}".format(custom_template_dir))

            # Copy custom plugin - if one exists. The convention is for plugin file to be named : BASE_DIr/plugins/<search ID>.py
            custom_plug_in = path.join(BASE_DIR, 'plugins', "{0}.py".format(options['search']))

            if path.exists(plugin_path):
                copyfile(path.join(plugin_path, "{0}.py".format(options['search'])), custom_plug_in)
                logging.info("Copying custom plugin to {0}".format(plugin_path))

            # Copy custom locale PO files to the django French PO file directory
            if path.exists(locale_path):
                locale_export = path.join(Path(__file__).resolve().parent.parent.parent.parent, 'locale', 'fr', 'LC_MESSAGES', "{0}.po".format(options['search']))
                copyfile(path.join(locale_path,  "{0}.po".format(options['search'])), locale_export)
                logging.info("Copying custom locale file to {0}".format(locale_export))

            # If there are custom data files included, save these to the project
            if path.exists(data_path):
                data_export_dir = path.join(Path(__file__).resolve().parent.parent.parent.parent, 'data', options['search'])
                if not path.exists(data_export_dir):
                    mkdir(data_export_dir)
                copy_tree(data_path, data_export_dir)
                logging.info("Copying custom data files to {0}".format(data_export_dir))

            # Copy custom command files to the django French PO file directory
            if path.exists(cmd_path):
                cmd_export = path.join(BASE_DIR, 'management', 'commands')
                copy_tree(cmd_path, cmd_export)
                logging.info("Copying custom Django commands to {0}".format(cmd_export))

            # Copy custom Django Database files to the django models file directory
            if path.exists(model_path):
                model_export = path.join(BASE_DIR, 'models', 'custom')
                copy_tree(model_path, model_export)
                logging.info("Copying custom Django Database models to {0}".format(model_export))

            # Copy custom extra files to the extras directory
            if path.exists(extras_path):
                extra_export = path.join(BASE_DIR, 'extras', options['search'])
                copy_tree(extras_path, extra_export)
                logging.info("Copying custom search extra files to {0}".format(extra_export))

            # Copy custom PyTest files to the tests directory
            if path.exists(tests_path):
                tests_export = path.join(Path(__file__).resolve().parent.parent.parent.parent, 'tests')
                copy_tree(tests_path, tests_export)
                logging.info("Copying custom PyTest files to {0}".format(tests_export))
